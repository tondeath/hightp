numRow <- nrow(exp_df)
numCol <- ncol(exp_df)
scoredf <- data.frame(matrix(NA, nrow = numRow, ncol = numCol))
row.names(scoredf) <- row.names(exp_df)
colnames(scoredf) <- colnames(exp_df)
for(i in 1:numRow){
rowSum <- sum(exp_df[i,])
for(j in 1:numCol){
penalty <- rowSum - exp_df[i,j]
robustness <- (numCol - 1) * exp_df[i,j]
score <- (robustness - penalty)/(robustness + penalty)
scoredf[i,j] <- score
}
}
return(scoredf)
}
scoreDf <- calcScore(testdf)
testdf
scoreDf
View(cage_dat)
View(cage_dat)
exp_df <- as.data.frame(exp_mat)
exp_score <- calcScore(exp_df)
cage_dat[max.col(t(exp_score), "first")]
max.col(t(exp_score), "first")
cage_dat[max.col(t(exp_score), "first"),]
cage_dat[max.col(t(exp_score), "first"),]
knitr::opts_chunk$set(echo = TRUE)
testdf <- data.frame(a = c(10,0,5), b = c(5,0,15), c= c(5,10,3))
calcScore <- function(exp_df){
# use min - max scaling
exp_df <- apply(exp_df, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
numRow <- nrow(exp_df)
numCol <- ncol(exp_df)
scoredf <- data.frame(matrix(NA, nrow = numRow, ncol = numCol))
row.names(scoredf) <- row.names(exp_df)
colnames(scoredf) <- colnames(exp_df)
for(i in 1:numRow){
rowSum <- sum(exp_df[i,])
for(j in 1:numCol){
penalty <- rowSum - exp_df[i,j]
robustness <- (numCol - 1) * exp_df[i,j]
score <- (robustness - penalty)/(robustness + penalty)
scoredf[i,j] <- score
}
}
return(scoredf)
}
scoreDf <- calcScore(testdf)
scale(testdf)
scoreDf
testdf <- data.frame(a = c(10,0,5), b = c(5,0,15), c= c(5,10,3))
calcScore <- function(exp_df){
# use min - max scaling
exp_df <- scale(exp_df)
#exp_df <- apply(exp_df, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
numRow <- nrow(exp_df)
numCol <- ncol(exp_df)
scoredf <- data.frame(matrix(NA, nrow = numRow, ncol = numCol))
row.names(scoredf) <- row.names(exp_df)
colnames(scoredf) <- colnames(exp_df)
for(i in 1:numRow){
rowSum <- sum(exp_df[i,])
for(j in 1:numCol){
penalty <- rowSum - exp_df[i,j]
robustness <- (numCol - 1) * exp_df[i,j]
score <- (robustness - penalty)/(robustness + penalty)
scoredf[i,j] <- score
}
}
return(scoredf)
}
scoreDf <- calcScore(testdf)
scale(testdf)
scoreDf
testdf <- data.frame(a = c(10,0,5), b = c(5,0,15), c= c(5,10,3))
calcScore <- function(exp_df){
# use min - max scaling
exp_df <- scale(exp_df)
#exp_df <- apply(exp_df, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
numRow <- nrow(exp_df)
numCol <- ncol(exp_df)
scoredf <- data.frame(matrix(NA, nrow = numRow, ncol = numCol))
row.names(scoredf) <- row.names(exp_df)
colnames(scoredf) <- colnames(exp_df)
for(i in 1:numRow){
rowSum <- sum(exp_df[i,])
for(j in 1:numCol){
penalty <- rowSum - exp_df[i,j]
robustness <- (numCol - 1) * exp_df[i,j]
score <- (robustness - penalty)/(robustness + abs(penalty))
scoredf[i,j] <- score
}
}
return(scoredf)
}
scoreDf <- calcScore(testdf)
scale(testdf)
scoreDf
testdf <- data.frame(a = c(10,0,5), b = c(5,0,15), c= c(5,10,3))
calcScore <- function(exp_df){
# use min - max scaling
exp_df <- scale(exp_df)
#exp_df <- apply(exp_df, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
numRow <- nrow(exp_df)
numCol <- ncol(exp_df)
scoredf <- data.frame(matrix(NA, nrow = numRow, ncol = numCol))
row.names(scoredf) <- row.names(exp_df)
colnames(scoredf) <- colnames(exp_df)
for(i in 1:numRow){
rowSum <- sum(exp_df[i,])
for(j in 1:numCol){
penalty <- rowSum - exp_df[i,j]
robustness <- (numCol - 1) * exp_df[i,j]
score <- (robustness - penalty)/(abs(robustness) + abs(penalty))
scoredf[i,j] <- score
}
}
return(scoredf)
}
scoreDf <- calcScore(testdf)
scale(testdf)
scoreDf
testdf <- data.frame(a = c(10,0,5), b = c(5,0,15), c= c(5,10,3))
calcScore <- function(exp_df){
# use min - max scaling
exp_df <- scale(exp_df)
#exp_df <- apply(exp_df, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
numRow <- nrow(exp_df)
numCol <- ncol(exp_df)
scoredf <- data.frame(matrix(NA, nrow = numRow, ncol = numCol))
row.names(scoredf) <- row.names(exp_df)
colnames(scoredf) <- colnames(exp_df)
for(i in 1:numRow){
rowSum <- sum(exp_df[i,])
for(j in 1:numCol){
penalty <- rowSum - exp_df[i,j]
robustness <- (numCol - 1) * exp_df[i,j]
score <- (robustness - penalty)/(abs(robustness + penalty))
scoredf[i,j] <- score
}
}
return(scoredf)
}
scoreDf <- calcScore(testdf)
scale(testdf)
scoreDf
testdf <- data.frame(a = c(10,0,5), b = c(5,0,15), c= c(5,10,3))
calcScore <- function(exp_df){
# use min - max scaling
exp_df <- scale(exp_df)
#exp_df <- apply(exp_df, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
numRow <- nrow(exp_df)
numCol <- ncol(exp_df)
scoredf <- data.frame(matrix(NA, nrow = numRow, ncol = numCol))
row.names(scoredf) <- row.names(exp_df)
colnames(scoredf) <- colnames(exp_df)
for(i in 1:numRow){
rowSum <- sum(exp_df[i,])
for(j in 1:numCol){
penalty <- rowSum - exp_df[i,j]
robustness <- (numCol - 1) * exp_df[i,j]
score <- (robustness - penalty)
scoredf[i,j] <- score
}
}
return(scoredf)
}
scoreDf <- calcScore(testdf)
scale(testdf)
scoreDf
testdf <- data.frame(a = c(10,0,5), b = c(5,0,15), c= c(5,10,3))
calcScore <- function(exp_df){
# use min - max scaling
exp_df <- scale(exp_df)
#exp_df <- apply(exp_df, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
numRow <- nrow(exp_df)
numCol <- ncol(exp_df)
scoredf <- data.frame(matrix(NA, nrow = numRow, ncol = numCol))
row.names(scoredf) <- row.names(exp_df)
colnames(scoredf) <- colnames(exp_df)
for(i in 1:numRow){
rowSum <- sum(exp_df[i,])
for(j in 1:numCol){
penalty <- rowSum - exp_df[i,j]
robustness <- (numCol - 1) * exp_df[i,j]
score <- (robustness - penalty)/abs((robustness - penalty))
scoredf[i,j] <- score
}
}
return(scoredf)
}
scoreDf <- calcScore(testdf)
scale(testdf)
scoreDf
testdf <- data.frame(a = c(10,0,5), b = c(5,0,15), c= c(5,10,3))
calcScore <- function(exp_df){
# use min - max scaling
exp_df <- scale(exp_df)
#exp_df <- apply(exp_df, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
numRow <- nrow(exp_df)
numCol <- ncol(exp_df)
scoredf <- data.frame(matrix(NA, nrow = numRow, ncol = numCol))
row.names(scoredf) <- row.names(exp_df)
colnames(scoredf) <- colnames(exp_df)
for(i in 1:numRow){
rowSum <- sum(exp_df[i,])
for(j in 1:numCol){
penalty <- rowSum - exp_df[i,j]
robustness <- (numCol - 1) * exp_df[i,j]
score <- (robustness - penalty)/abs((robustness + penalty))
scoredf[i,j] <- score
}
}
return(scoredf)
}
scoreDf <- calcScore(testdf)
scale(testdf)
scoreDf
testdf <- data.frame(a = c(10,0,5), b = c(5,0,15), c= c(5,10,3))
calcScore <- function(exp_df){
# use min - max scaling
exp_df <- scale(exp_df)
#exp_df <- apply(exp_df, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
numRow <- nrow(exp_df)
numCol <- ncol(exp_df)
scoredf <- data.frame(matrix(NA, nrow = numRow, ncol = numCol))
row.names(scoredf) <- row.names(exp_df)
colnames(scoredf) <- colnames(exp_df)
for(i in 1:numRow){
rowSum <- sum(exp_df[i,])
for(j in 1:numCol){
penalty <- rowSum - exp_df[i,j]
robustness <- (numCol - 1) * exp_df[i,j]
score <- (robustness - penalty)
scoredf[i,j] <- score
}
}
return(scoredf)
}
scoreDf <- calcScore(testdf)
scale(testdf)
scoreDf
library(tidyverse)
library(pheatmap)
setwd("/home/nuttapong/Desktop/block4/hightp/datamining/data_mining_for_students/data_mining_for_students")
cage_dat <- read_tsv("htbinf_cage_tpms.txt")
# data set contain cage tag cluster id (tc_id) + its location + expression in each tissue
exp_mat <- as.matrix(cage_dat[4:10])
rownames(exp_mat) <- cage_dat[["tc_id"]]
exp_df <- as.data.frame(exp_mat)
exp_score <- calcScore(exp_df)
cage_dat[max.col(t(exp_score), "first"),]
testdf <- data.frame(a = c(10,0,5), b = c(5,0,15), c= c(5,10,3))
calcScore <- function(exp_df){
# use min - max scaling
exp_df <- scale(exp_df)
#exp_df <- apply(exp_df, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
numRow <- nrow(exp_df)
numCol <- ncol(exp_df)
scoredf <- data.frame(matrix(NA, nrow = numRow, ncol = numCol))
row.names(scoredf) <- row.names(exp_df)
colnames(scoredf) <- colnames(exp_df)
for(i in 1:numRow){
rowSum <- sum(exp_df[i,])
for(j in 1:numCol){
penalty <- rowSum - exp_df[i,j]
robustness <- (numCol - 1) * exp_df[i,j]
score <- (robustness - penalty)
scoredf[i,j] <- score
}
}
return(scoredf)
}
scoreDf <- calcScore(testdf)
scale(testdf)
scoreDf
exp_df <- as.data.frame(exp_mat)
exp_score <- calcScore(exp_df)
cage_dat[max.col(t(exp_score), "first"),]
testdf <- data.frame(a = c(10,0,5), b = c(5,0,15), c= c(5,10,3))
calcScore <- function(exp_df){
# use min - max scaling
exp_df <- scale(exp_df)
#exp_df <- apply(exp_df, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
numRow <- nrow(exp_df)
numCol <- ncol(exp_df)
scoredf <- data.frame(matrix(NA, nrow = numRow, ncol = numCol))
row.names(scoredf) <- row.names(exp_df)
colnames(scoredf) <- colnames(exp_df)
for(i in 1:numRow){
rowSum <- sum(exp_df[i,])
for(j in 1:numCol){
penalty <- rowSum - exp_df[i,j]
robustness <- (numCol - 1) * exp_df[i,j]
score <- (robustness - penalty)/robustness
scoredf[i,j] <- score
}
}
return(scoredf)
}
scoreDf <- calcScore(testdf)
scale(testdf)
scoreDf
testdf <- data.frame(a = c(10,0,5), b = c(5,0,15), c= c(5,10,3))
calcScore <- function(exp_df){
# use min - max scaling
exp_df <- scale(exp_df)
#exp_df <- apply(exp_df, MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
numRow <- nrow(exp_df)
numCol <- ncol(exp_df)
scoredf <- data.frame(matrix(NA, nrow = numRow, ncol = numCol))
row.names(scoredf) <- row.names(exp_df)
colnames(scoredf) <- colnames(exp_df)
for(i in 1:numRow){
rowSum <- sum(exp_df[i,])
for(j in 1:numCol){
penalty <- rowSum - exp_df[i,j]
robustness <- (numCol - 1) * exp_df[i,j]
score <- 1 - penalty/robustness
scoredf[i,j] <- score
}
}
return(scoredf)
}
scoreDf <- calcScore(testdf)
scale(testdf)
scoreDf
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "./")
setwd("~/Desktop/block4/hightp/homework3/HW3_combined_handout")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "./")
library(IsoformSwitchAnalyzeR)
library(tidyverse)
library(pheatmap)
wt1_quant <- read_tsv("./salmon_result_part1/WT1/quant.sf")
wt1_quant %>% ggplot(aes(x=Length, y=EffectiveLength)) +
scale_x_continuous(trans='log10') + scale_y_continuous(trans='log10')  +
geom_point(alpha=0.3) +
geom_smooth() + geom_abline(color = "red", linetype=2)
View(wt1_quant)
View(wt1_quant)
wt1_quant %>% filter(EffectiveLength < 150)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "./")
library(IsoformSwitchAnalyzeR)
library(tidyverse)
library(pheatmap)
wt1_quant <- read_tsv("./salmon_result_part1/WT1/quant.sf")
wt1_quant %>% ggplot(aes(x=Length, y=EffectiveLength)) +
scale_x_continuous(trans='log10') + scale_y_continuous(trans='log10')  +
geom_point(alpha=0.3) +
geom_smooth() + geom_abline(color = "red", linetype=2)
all_salmons <- importIsoformExpression(parentDir = "./salmon_result_part1/")
salmon_matrix <- as.matrix(all_salmons$abundance[,2:ncol(all_salmons$abundance)])
rownames(salmon_matrix) <- all_salmons$abundance[,1]
transformed_salmon <- log2(salmon_matrix+1)
transformed_salmon[1:4,]
salmon_tibble <- as_tibble(transformed_salmon, rownames=NA)
top100var <- salmon_tibble %>% rownames_to_column() %>% rowwise() %>%
mutate(variance=var(c(WT1, WT2, WT3, WTTPA1, WTTPA2, WTTPA3))) %>%
arrange(desc(variance)) %>% slice(1:100)
head(top100var, 5)
top100var_mat <- as.matrix(top100var[,2:7])
rownames(top100var_mat) <- as.data.frame(top100var)[,1]
pheatmap(top100var_mat, show_rownames = TRUE, scale = "row", fontsize_row = 2.5,
fontsize_col = 5)
all_salmons2 <- importIsoformExpression(parentDir = "./salmon_result_part2/")
designMat <- data.frame(sampleID=colnames(all_salmons2$abundance)[-1],
condition=
str_replace(colnames(all_salmons2$abundance)[-1], "[0-9]", ""))
switchAnalyzeRList <- importRdata(isoformCountMatrix = all_salmons2$counts,
isoformRepExpression = all_salmons2$abundance,
designMatrix = designMat,
isoformExonAnnoation =
"./salmon_result_part2/subset.gtf",
addAnnotatedORFs=FALSE)
switchAnalyzeRList
switchList <- readRDS("./hw3switchList.Rdata")
top10switch <- extractTopSwitches(switchList, filterForConsequences = TRUE,
sortByQvals=TRUE, n=10)
top10switch
extractConsequenceEnrichment(
switchList,
consequencesToAnalyze='all',
analysisOppositeConsequence = TRUE,
returnResult = FALSE
)
extractSplicingEnrichment(
switchList,
returnResult = FALSE
)
top100var_mat <- as.matrix(top100var[,2:7])
rownames(top100var_mat) <- as.data.frame(top100var)[,1]
pheatmap(top100var_mat, show_rownames = FALSE, scale = "row", fontsize_row = 2.5,
fontsize_col = 5)
?switchPlot
wt1_quant %>% filter(EffectiveLength == 170)
l170 <- wt1_quant %>% filter(EffectiveLength == 170)
View(l170)
View(l170)
l170 <- wt1_quant %>% filter(EffectiveLength == 170 & TPM == 0)
l170 <- wt1_quant %>% filter(EffectiveLength == 170 & TPM == 0)
dim(l170)
l170 <- wt1_quant %>% filter(EffectiveLength == 170 & TPM == 0)
dim(l170)[1]
l170tpm0 <- wt1_quant %>% filter(EffectiveLength == 170 & TPM == 0)
l170tpmnot0 <- wt1_quant %>% filter(EffectiveLength == 170 & TPM != 0)
dim(l170)[1]
dim(l170tpmnot0)[1]
View(l170tpmnot0)
View(l170tpmnot0)
min(l170tpm0)
min(l170tpm0$Length)
View(l170)
View(l170)
wt1_quant <- read_tsv("./salmon_result_part1/WT2/quant.sf")
l170tpm0 <- wt1_quant %>% filter(EffectiveLength == 170 & TPM == 0)
l170tpmnot0 <- wt1_quant %>% filter(EffectiveLength == 170 & TPM != 0)
dim(l170)[1]
dim(l170tpmnot0)[1]
wt1_quant <- read_tsv("./salmon_result_part1/WT3/quant.sf")
l170tpm0 <- wt1_quant %>% filter(EffectiveLength == 170 & TPM == 0)
l170tpmnot0 <- wt1_quant %>% filter(EffectiveLength == 170 & TPM != 0)
dim(l170)[1]
dim(l170tpmnot0)[1]
wt2_quant <- read_tsv("./salmon_result_part1/WT2/quant.sf")
wt1_quant <- read_tsv("./salmon_result_part1/WT1/quant.sf")
l170wt1 <- wt1_quant %>% filter(EffectiveLength == 170 & TPM == 0)
l170wt2 <- wt2_quant %>% filter(EffectiveLength == 170 & TPM == 0)
union(c(1,2,3), c(2,4,5))
intersect(c(1,2,3), c(2,4,5))
intersect(l170wt1$Name, l170wt2$Name)
l170wt1$Name
as,vector(l170wt1$Name)
as.vector(l170wt1$Name)
intersect(c("TCONS_00011932", "TCONS_00011933", "TCONS_00011934"), c("TCONS_00011932", "TCONS_00011933", "TCONS_00011934"))
intersect(as.vector(l170wt1$Name), as.vector(l170wt1$Name))
intersect(as.vector(l170wt1$Name), as.vector(l170wt2$Name))
View(l170wt2)
View(l170wt2)
wt2_quant %>% filter(EffectiveLength == 170 & TPM == 0)
wt2_quant %>% filter(EffectiveLength == 170)
wt2_quant %>% filter(TPM == 0)
wt1_quant <- read_tsv("./salmon_result_part1/WT2/quant.sf")
wt1_quant %>% ggplot(aes(x=Length, y=EffectiveLength)) +
scale_x_continuous(trans='log10') + scale_y_continuous(trans='log10')  +
geom_point(alpha=0.3) +
geom_smooth() + geom_abline(color = "red", linetype=2)
wt1_quant <- read_tsv("./salmon_result_part1/WT2/quant.sf")
wt1_quant %>% ggplot(aes(x=Length, y=EffectiveLength)) +
scale_x_continuous(trans='log10') + scale_y_continuous(trans='log10')  +
geom_point(alpha=0.3) +
geom_smooth() + geom_abline(color = "red", linetype=2)
View(wt1_quant)
View(wt1_quant)
wt1_quant %>% filter(EffectiveLength == 170 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 180 & TPM == 0)
wt1_quant %>% filter(EffectiveLength < 180 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 178 & TPM == 0)
wt1_quant <- read_tsv("./salmon_result_part1/WT3/quant.sf")
wt1_quant %>% ggplot(aes(x=Length, y=EffectiveLength)) +
scale_x_continuous(trans='log10') + scale_y_continuous(trans='log10')  +
geom_point(alpha=0.3) +
geom_smooth() + geom_abline(color = "red", linetype=2)
View(wt1_quant)
View(wt1_quant)
wt1_quant %>% filter(EffectiveLength < 180 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 178 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 180 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 179 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 170 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 171 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 172 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 173 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 174 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 175 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 176 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 177 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 178 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 179 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 180 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 181 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 182 & TPM == 0)
wt1_quant <- read_tsv("./salmon_result_part1/WT2/quant.sf")
wt1_quant %>% filter(EffectiveLength == 178 & TPM == 0)
wt1_quant %>% filter(EffectiveLength == 179 & TPM == 0)
all_salmons2 <- importIsoformExpression(parentDir = "./salmon_result_part2/")
designMat <- data.frame(sampleID=colnames(all_salmons2$abundance)[-1],
condition=
str_replace(colnames(all_salmons2$abundance)[-1], "[0-9]", ""))
switchAnalyzeRList <- importRdata(isoformCountMatrix = all_salmons2$counts,
isoformRepExpression = all_salmons2$abundance,
designMatrix = designMat,
isoformExonAnnoation =
"./salmon_result_part2/subset.gtf",
addAnnotatedORFs=FALSE)
switchAnalyzeRList
switchList <- readRDS("./hw3switchList.Rdata")
top10switch <- extractTopSwitches(switchList, filterForConsequences = TRUE,
sortByQvals=TRUE, n=10)
top10switch
switchPlot(top10switch)
extractTopSwitches(switchList, filterForConsequences = TRUE,
sortByQvals=TRUE, n=10)
switchPlot(
switchAnalyzeRlist = switchList,
gene = top10switch$gene_id,
condition1 = top10switch$condition_1,
condition2 = top10switch$condition_2
)
